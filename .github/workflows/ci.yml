name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openmfg_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4 # Updated to v4
      
      - name: Set up Python
        uses: actions/setup-python@v5 # Updated to v5
        with:
          python-version: '3.10' # Consistent with pyproject.toml and Dockerfile
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2 # Consistent with Dockerfile
      
      - name: Install Python dependencies (Poetry)
        working-directory: ./openmanufacturing # Assuming pyproject.toml is in this subdir
        run: |
          poetry install
      
      - name: Install C++ dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-dev libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
      
      - name: Build C++ components (root CMakeLists.txt)
        run: |
          mkdir build_cpp_lib
          cd build_cpp_lib
          cmake ..
          make -j$(nproc)
      
      - name: Lint with flake8
        working-directory: ./openmanufacturing # Run in the Python package directory
        run: |
          poetry run flake8 src tests
      
      - name: Type check with mypy
        working-directory: ./openmanufacturing
        run: |
          poetry run mypy src
      
      - name: Format check with black
        working-directory: ./openmanufacturing
        run: |
          poetry run black --check src tests
      
      - name: Import sort check with isort
        working-directory: ./openmanufacturing
        run: |
          poetry run isort --check-only src tests
      
      - name: Run tests
        working-directory: ./openmanufacturing 
        run: |
          poetry run pytest tests/unit --cov=src --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openmfg_test
          REDIS_URL: redis://localhost:6379/0
          PYTHONPATH: ${{ github.workspace }}/openmanufacturing/src # To find the openmanufacturing package
          # Note: For C++ shared libraries, they would need to be findable, e.g. in LD_LIBRARY_PATH if tests call them directly

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 # Updated to v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Store Codecov token as a secret
          file: ./openmanufacturing/coverage.xml # Path to coverage file relative to workspace root
          # fail_ci_if_error: true # Re-enable if desired
  
  build-docker-image:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Updated to v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Updated to v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push API Docker image
        uses: docker/build-push-action@v5 # Updated to v5
        with:
          context: .
          file: ./Dockerfile # Corrected from dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/openmanufacturing-api:latest, ${{ secrets.DOCKER_HUB_USERNAME }}/openmanufacturing-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/openmanufacturing-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/openmanufacturing-api:buildcache,mode=max

  # Placeholder for deployment job from main.txt
  # deploy:
  #   needs: build-docker-image
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Install doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
  #     - name: Update deployment file (Example)
  #       run: |
  #         TAG=$(echo $GITHUB_SHA | head -c7)
  #         # This assumes you have a k8s manifest and need to update the image tag
  #         # sed -i 's|image:.*|image:${{ secrets.DOCKER_HUB_USERNAME }}/openmanufacturing-api:'"$TAG"'|' k8s/deployment.yaml
      
  #     - name: Save DigitalOcean kubeconfig
  #       run: doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_NAME }}
      
  #     - name: Deploy to k8s (Example)
  #       run: kubectl apply -f k8s/ # This assumes you have k8s manifests in a k8s/ directory
      
  #     - name: Verify deployment (Example)
  #       run: kubectl rollout status deployment/openmanufacturing-api 